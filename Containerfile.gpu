# Multi-stage Dockerfile for Docling Serve with GPU (CUDA 12.8) and UI
# Base on NVIDIA CUDA runtime for GPU support
ARG CUDA_VERSION=12.8.0
ARG UBUNTU_VERSION=22.04
ARG BASE_IMAGE=nvidia/cuda:${CUDA_VERSION}-cudnn-devel-ubuntu${UBUNTU_VERSION}

ARG UV_VERSION=0.8.3

FROM ${BASE_IMAGE} AS docling-gpu-base

# All sync options are baked in; serverless builders pass no extra build args
ENV UV_SYNC_EXTRA_ARGS="--no-default-groups --group cu128 --extra ui"

###################################################################################################
# OS Layer - Base GPU dependencies (CUDA, Tesseract, fonts, imaging libs)                        #
###################################################################################################

# Install system dependencies
USER root
ENV DEBIAN_FRONTEND=noninteractive

# Install basic dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    wget \
    unzip \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3.12 (optional; remove this block to use system Python 3.10)
RUN add-apt-repository -y ppa:deadsnakes/ppa && \
        apt-get update && \
        apt-get install -y \
            python3.12 \
            python3.12-dev \
            python3.12-venv \
        && python3.12 -m ensurepip --upgrade && \
        python3.12 -m pip install --no-cache-dir --upgrade pip setuptools wheel && \
        rm -rf /var/lib/apt/lists/*

# Create symbolic links for python
RUN ln -sf /usr/bin/python3.12 /usr/bin/python3 && \
    ln -sf /usr/bin/python3.12 /usr/bin/python

# Install system packages for OCR and document processing
RUN apt-get update && apt-get install -y \
    # Tesseract OCR
    tesseract-ocr \
    tesseract-ocr-ara \
    tesseract-ocr-eng \
    libtesseract-dev \
    # Image processing libraries
    libopencv-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    # Font support
    fontconfig \
    fonts-dejavu-core \
    fonts-noto \
    fonts-noto-cjk \
    fonts-noto-color-emoji \
    # Additional dependencies
    libmagic1 \
    poppler-utils \
    libpoppler-dev \
    libfreetype6-dev \
    libjpeg-dev \
    libpng-dev \
    libwebp-dev \
    libtiff5-dev \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for Tesseract
ENV TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata/

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser -u 1001 appuser

# Create application directories
RUN mkdir -p /opt/app-root/src/.cache/docling/models && \
    chown -R appuser:appuser /opt/app-root

FROM ghcr.io/astral-sh/uv:${UV_VERSION} AS uv_stage

###################################################################################################
# Docling GPU layer with UI                                                                     #
###################################################################################################

FROM docling-gpu-base

USER appuser
WORKDIR /opt/app-root/src

ENV \
    OMP_NUM_THREADS=4 \
    LANG=en_US.UTF-8 \
    LC_ALL=C.UTF-8 \
    PYTHONIOENCODING=utf-8 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    UV_PROJECT_ENVIRONMENT=/opt/app-root \
    DOCLING_SERVE_ARTIFACTS_PATH=/opt/app-root/src/.cache/docling/models \
    HF_HOME=/opt/app-root/src/.cache/huggingface \
    TRANSFORMERS_CACHE=/opt/app-root/src/.cache/huggingface/transformers \
    HUGGINGFACE_HUB_CACHE=/opt/app-root/src/.cache/huggingface/hub \
    DOCLING_SERVE_ENABLE_UI=1 \
    CUDA_VISIBLE_DEVICES=all \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

ENV UV_SYNC_EXTRA_ARGS="--no-default-groups --group cu128 --extra ui"

# Copy uv binary (no BuildKit mount) and project metadata, then install deps.
COPY --from=uv_stage /uv /bin/uv
COPY pyproject.toml uv.lock ./
RUN umask 002 && \
    /bin/uv sync --frozen --no-install-project --no-dev --no-default-groups --group cu128 --extra ui --no-extra flash-attn && \
    chown -R appuser:appuser /opt/app-root && chmod -R g+w /opt/app-root

# Download selected pre-trained models (extend MODELS_LIST via build arg if needed)
ARG MODELS_LIST="layout tableformer picture_classifier code_formula smoldocling"

RUN echo "Downloading AI models..." && \
    HF_HUB_DOWNLOAD_TIMEOUT="180" \
    HF_HUB_ETAG_TIMEOUT="180" \
    docling-tools models download -o "${DOCLING_SERVE_ARTIFACTS_PATH}" ${MODELS_LIST} && \
    chown -R appuser:appuser ${DOCLING_SERVE_ARTIFACTS_PATH} && \
    chmod -R g=u ${DOCLING_SERVE_ARTIFACTS_PATH}

# (Optional) Add an OCR engine warm-up step (e.g. easyocr, tesserocr) if needed later.

 # Copy application code (after dependency layer for better caching)
COPY --chown=appuser:appuser ./docling_serve ./docling_serve

# Install the application (project itself)
RUN umask 002 && /bin/uv sync --frozen --no-dev ${UV_SYNC_EXTRA_ARGS}

# Create directories for logs and cache
RUN mkdir -p /opt/app-root/src/logs /opt/app-root/src/data && \
    chown -R appuser:appuser /opt/app-root/src/logs /opt/app-root/src/data

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5001/v1/health || exit 1

# Expose port
EXPOSE 5001

# Set the default command
CMD ["docling-serve", "run", "--enable-ui", "--host", "0.0.0.0", "--port", "5001"]
